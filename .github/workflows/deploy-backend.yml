name: Deploy Backend to AWS EC2

on:
  push:
    branches: [main]
    paths:
      - "api/**"
      - "model/**"
      - "color_changer/**"
      - "Dockerfile"
      - "requirements.txt"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    branches: [main]
    paths:
      - "api/**"
      - "model/**"
      - "color_changer/**"
      - "Dockerfile"
      - "requirements.txt"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/luviraai-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/luviraai-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get GitHub Actions Runner IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Add Runner IP to AWS Security Group
        if: github.event_name == 'push' # Only run on push to main
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 \
            --region ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2 via SSH
        if: github.event_name == 'push' # Only run on push to main
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            if ! command -v aws &> /dev/null; then
              sudo apt-get update -y
              sudo apt-get install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws
            fi

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/luviraai-api:${{ github.sha }}

            docker stop luviraai-backend-container || true
            docker rm luviraai-backend-container || true

            aws ssm get-parameters-by-path \
              --path "/luviraai/prod" \
              --recursive \
              --with-decryption \
              --query "Parameters[].[Name,Value]" \
              --output text \
              --region ${{ secrets.AWS_REGION }} \
            | sed 's#/luviraai/prod/##' \
            | awk '{printf "%s=%s\n",$1,$2}' \
            > .env

            docker run -d \
              --name luviraai-backend-container \
              --restart unless-stopped \
              --env-file .env \
              --log-driver awslogs \
              --log-opt awslogs-region=${{ secrets.AWS_REGION }} \
              --log-opt awslogs-group=/luviraai/api \
              --log-opt awslogs-create-group=true \
              --log-opt awslogs-stream=luviraai-$(hostname) \
              -p 127.0.0.1:8000:8000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/luviraai-api:${{ github.sha }}

            docker image prune -af

      - name: Remove Runner IP from AWS Security Group
        if: always() && github.event_name == 'push' # Only run on push to main, but always run even if deploy fails
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32 \
            --region ${{ secrets.AWS_REGION }}
